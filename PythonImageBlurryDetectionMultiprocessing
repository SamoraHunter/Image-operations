import os
import shutil
from os import walk
import cv2
import numpy as np
from multiprocessing import Pool
from itertools import product


def variance_of_laplacian(imageBlur):
    image = cv2.imread(imageBlur)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    return cv2.Laplacian(gray, cv2.CV_64F).var()


archive = "...path to folder with unsorted images"

#set threshold here, higher means greater false positive
threshold = 50
#threshold = 10000

fileList = []
for (dirpath, dirnames, filenames) in walk(archive):
    if (dirpath == archive):
        fileList.extend(filenames)
        break


#Create archive for blurry if doesn't exist
try:
    os.stat(archive + '\\' + 'blurry')
except:
    os.mkdir(archive + '\\' + 'blurry')


def moveIfBlur(image):

    global threshold
    global archive

    print("Checking "+ archive+'\\'+image)
    try:
        var = variance_of_laplacian(archive+'\\' +image)
        if(var<threshold):
                print(var)
                shutil.move(archive+'\\'+image, archive+'\\'+'blurry')
    except Exception as e:
        print(e)
        #breakpoint()



if __name__ == '__main__':

    #We reread the file directory as files may be moved
    fileList = []
    for (dirpath, dirnames, filenames) in walk(archive):
        if (dirpath == archive):
            fileList.extend(filenames)
        
    archive = "...path to archive"
    
    print(len(fileList))
    

    #Set number of logical processes to use :24, useful to set lower than total number to not overload. 
    with Pool(12) as p:
        fileList = []
        for (dirpath, dirnames, filenames) in walk(archive):
            fileList.extend(filenames)
        print(p.map(moveIfBlur, fileList, 10))




